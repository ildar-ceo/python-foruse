# -*- coding: utf-8 -*- import sysfrom .colors import colorf, COLORSfrom .datelib import *DEBUG=5INFO=4WARNING=3ERROR=2CRITICAL=1TO_STR={	DEBUG: 'DEBUG',	INFO: 'INFO',	WARNING: 'WARNING',	ERROR: 'ERROR',	CRITICAL: 'CRITICAL',}FROM_STR={	'DEBUG': DEBUG,	'INFO': INFO,	'WARNING': WARNING,	'ERROR': ERROR,	'CRITICAL': CRITICAL,}class Logging:		def __init__(self):		self.colors={			DEBUG: 'b_cyan',			INFO: 'b_blue',			WARNING: 'b_yellow',			ERROR: 'b_red',			CRITICAL: 'b_red',		}				self.level = INFO		self.format = "[%(date)s] %(color)s%(level)+8s: %(message)s%(nc)s"	def setup(self, format):		self.format = format	def set_level(self, level):		if type(level) is str:			self.level=FROM_STR.get(level, INFO)		elif TO_STR.get(level) is not None:			self.level = level			def log(self, s, *args, **kwargs):				level_num = kwargs.get('level')		level_str = TO_STR.get(level_num)		level_color = self.colors.get(level_num)				if level_str is None:			level_num = INFO			level_str = TO_STR.get(level_num)			level_color = self.colors.get(level_num)				if level_num > self.level:			return				time = localtime()				params = {			'message': s,			'level': level_str,			'date': time.strftime(DATETIME_FORMAT),			'color': COLORS.get(level_color),			'nc': COLORS.get('nc'),		}		print (self.format % params)		sys.stdout.flush()	#!endclass log	#!endclass Logginglogging = Logging()def log(s, *args, **kwargs):	logging.log(s, *args, **kwargs)	def setup(format):	logging.setup(format)	def set_level(level):	logging.set_level(level)	def debug(s, *args, **kwargs):	log(s, *args, level=DEBUG, **kwargs)	def info(s, *args, **kwargs):	log(s, *args, level=INFO, **kwargs)	def warn(s, *args, **kwargs):	log(s, *args, level=WARNING, **kwargs)	def error(s, *args, **kwargs):	log(s, *args, level=ERROR, **kwargs)	def critical(s, *args, **kwargs):	log(s, *args, level=CRITICAL, **kwargs)